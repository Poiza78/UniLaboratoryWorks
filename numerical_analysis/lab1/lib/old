#require "lab1/version"

import random

class Matrix:

    def __init__(self, size, rang):
    self.n = size
    #TODO maybe convert to hash
    #and not from 1 but -range
    self.a = [random.randint(1,rang) for _ in range(self.n)]
    self.a = [random.randint(1,rang) for _ in range(self.n)]
    self.a = [random.randint(1,rang) for _ in range(self.n)]
    self.a = [random.randint(1,rang) for _ in range(self.n)]
    @a = Array.new (n) { rand 1..range }
    @b = Array.new (n) { rand 1..range }
    @c = Array.new (n) { rand 1..range }
    @p = Array.new (n) { rand 1..range }
    @q = Array.new (n) { rand 1..range }
    @f = Array.new n, 1
    @a[0] = @c[n-1] = 0
    @p[0] = @b[0]
    @p[1] = @a[1]
    @q[n-1] = @b[n-1]
    @q[n-2] = @c[n-2]
  end

  def show
    matrix = Array.new(@n, (Array.new @n, 0))
    print matrix
    @n.times do |i|
 #     matrix[i][0] = @p[i]
 #     matrix[i][n-1] = @q[i]
      @n.times do |j|
        case i-j
        when 1
          matrix[i][j] = @a[i]
        when 0
          matrix[i][j] = @b[i]
        when -1
          matrix[i][j] = @c[i]
        end
      end
 #     print matrix[i].inspect, " | ", f[i], "\n"
    end
    print matrix

#    matrix.each_with_index do |row, index|
#      print row
#      print " | "
#      puts @f[index]
#    end
  end






end

m = Matrix.new(5,5)
m.show()
